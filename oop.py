# -*- coding: utf-8 -*-
"""OOP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1foD7N1AuOhuEWzqYfT-Qkc2bW8h-Juo9

# **Fungsi**
"""

# Deklarasi Fungsi
def cetak(x):
  print(x)

# Memanggil Fungsi
cetak("wokee")

"""Latihan"""

def tes(x):
  print(x)
  print('Gak', ', lu bau')

tes('apa?')

# Deklarasi Fungsi dengan pengembalian
def tambah(a, b):
  return a + b;

# Memanggil Fungsi
print(tambah(2, 3))

"""Latihan"""

def kali(a,b,c,d):
  return (a*b)+(c-d)

print('Jawabannya adalah ',kali(5,2,1,6))

"""# **Method**"""

class NamaClass:
  def nama_method(arg1, arg2, ...):
    # isi method

# Deklarasi Object (Class)
class Kucing(object):
  def meong(self):
    print("meeooong")

# Memanggil method
cat = Kucing()
cat.meong()

"""Latihan"""

class Manusia(object):
  def auu(self):
    print('AWKOWKOWOWK')

human = Manusia()
human.auu

"""# **Lambda Expression**"""

# Lambda expression
tambah = lambda a, b: (a + b)
print(tambah(2, 3))

"""Latihan"""

campuran  = lambda a,b,c,d: ((a+c)+(b*d))
print(campuran(2,4,9,8))

"""# **Object Oriented Programming**

## **Encapsulation**
"""

nama = "cemong"
bentuk = 1
warna = "putih coklat muda"
jenis = "anggora"

def meongg():
  print("meeeoonnggg... ")

def info_kucing(nama, bentuk, warna, jenis):
  print(f"nama: {nama}, bentuk: {bentuk}, warna: {warna}, jenis: {jenis}")

info_kucing(nama, bentuk, warna, jenis)


class Kucing:
  def __init__(self, nama, bentuk, warna, jenis):
    self.nama = nama
    self.bentuk = bentuk
    self.warna = warna
    self.jenis = jenis

  def fungshi(self):
    print("Hello my name is " + self.nama)
  
  def meong(self):
    print("meeeoonnggg... ")

  def info(self):
    print(f"nama: {self.nama}, bentuk: {self.bentuk}, warna: {self.warna}, jenis: {self.jenis}")


kucing1 = Kucing("cemong", 1, "putih coklat muda", "anggora")

kucing1.info()

"""Latihan"""

nama = "Barang."
bentuk = 'Headshet'
warna = "yang pernah ada"
jenis = "dual driper"

class Barang:
  def __init__(self, nama, bentuk, warna, jenis):
    self.nama = nama
    self.bentuk = bentuk
    self.warna = warna
    self.jenis = jenis

  def fungshi(self):
    print('Ini adalah :')
    print("Namanya : " + self.nama)

  def info(self):
    print(f"nama: {self.nama}, Bentuk: {self.bentuk}, warna: {self.warna}, jenis: {self.jenis}")


barangs = Barang("Larry", 'Headshet', "yang pernah ada", "dual driper")

barangs.info()
print('')
barangs.fungshi()

"""## **Abstraction**"""

# Memanggil method dari objek tanpa harus mengetahui cara kerja method
barangs.fungshi()

"""## **Inheritence**"""

class Barang(object):
  def __init__(self, nama, bentuk, jenis, warna):
    self.nama = nama
    self.bentuk = bentuk
    self.jenis = jenis
    self.warna = warna

  def suara(self, durasi):
    for x in range(durasi):
      print("The ting go skrrah",'skidikakak','apupupum')

  def info(self):
    print(f"nama: {self.nama}, bentuk: {self.bentuk}, jenis: {self.jenis}, warna: {self.warna}")


barangs = Barang("Larry", 'Headshet', "dual driper", 'yang pernah ada')

print('Ini Barang 1')
barangs.info()
print('')
print('Suaranya begini')
barangs.suara(5)
print('')

class Gelas(Barang):
  def __init__(self,  nama, bentuk, jenis, warna, tipe):
    super().__init__(nama, bentuk, jenis, warna)
    self.warna = warna
    self.tipe = tipe
  def suara2(self, durasi):
    for x in range(durasi):
      print("kuyang",'hayikkk','hiyakkk')

  def meong(self):
    print("apa looo baca aja")

  def info_barang(self):
    print(f"tipe: {self.tipe}")


gelas = Gelas("Leroi", 'Headphone', "quad driper","yang pernah ada", "apa aja bole")


print('Ini gelas lho')
gelas.info()
gelas.info_barang()
print('')
gelas.suara2(4)
print('')
gelas.meong()

"""## **Polymorphism**"""

class Kipas(Barang):
  def __init__(self,nama, bentuk, jenis, warna, tipe):
    super().__init__(nama, bentuk, jenis, warna)
    self.tipe = tipe
  
  def burenang(self, durasi):
    for x in range(durasi):
      print('uwiiingg','swuuushh','ding ding','ba dum tssahhhhh')

  def info_tipe(self):
    print(f"tipe: {self.tipe}")

kypas = Kipas("Masipon","Kipash", "4 kipas Rotor blade", "yang pernah ada", "Cupang")

print('Ini kipas ges')
kypas.info()
kypas.info_tipe()
print('')
print('Suara Kipasnya begini ')
kypas.burenang(10)

"""## **Activity OOP**

Buatlah 3 OOP beserta turunannya dari objek sekitar, buat ulang seperti yang diatas (encapsulation, abstaction, inheritance, polymorphism)

# **Time Complexity**
## Activity 

Hitung time complexity dengan bigO Notation pada algoritma berikut:

* Tidak perlu di run
"""

# 1 O(1)

arr = [1, 2, 3, 4, 5]

print(arr[0])
print(arr[1])

# 2 O(n)

print(arr[2])
for number in arr:
  print(number)
print(arr[1])
print(arr[2])

# 3 O(n)

arr2 = [6, 7, 8, 9, 10]

for number in arr:
  print(number)
for number in arr2:
  print(number)
print(arr2[4])

# 4 O(n^2)

print(arr2[1])
for number in arr:
  print(number)
for number in arr:
  print(number)

# 5 O(n^2)

for number in arr:
  for number2 in arr2:
    print(number+number2)
print(arr[1]+arr2[1])
print(arr2[2])

# 6 O(n^2)

for number in arr:
  for number2 in arr:
    print(number+number2)
print(arr)

# 7 O(n^3)

for number in arr:
  for number2 in arr2:
    for number3 in arr:
      print(number+number2+number3)
print(arr[1])
print(arr2[2])
print(arr2[3])

# 8 O(log n)

for number in arr:
  print(number)
print(arr2)
for number in arr:
  for number2 in arr2:
    print(number+number2)
print(arr)

# 9 
def a(x):
  for i in range(len(x)-1,0,-1):
    for j in range(i):
      if x[j]>x[j+1]:
        temp = x[j]
        x[j]=x[j+1]
        x[j+1]=temp
    
angka = [47,10,98,1001,8,79,100,55,78,18]
a(angka)
print(angka)
# algoritma bubble sort

# 10
l = [114, 110, 77, 112, 65, 80, 80, 90, 113, 109, 110, 86, 108, 85, 87, 65,90, 95, 109]
x = 114 # elemen yang ingin dicari
jum_el = len(l)
l.append(x) # tambahkan elemen x pada akhir list sebagai sentinel
idx = 0

while l[idx] != x:
   idx+=1

if idx < jum_el:
  print('Nilai',x,'ditemukan pada indeks',idx)   
else:
  print('Nilai ',x,'tidak ditemukan')

# algoritma linear search

# 11
l = [1,3,4,6,7,8,10,13,14,18,19,21,24,3,7,40,45,71]
dicari = 10
print('Mencari nilai',dicari,'dengan binary search','pada list',l)
ditemukan = False
batas_awal = 0
batas_akhir = len(l) - 1
while not ditemukan and batas_awal <= batas_akhir:
  pos_cari = batas_awal + (batas_akhir-batas_awal)//2 # ambil posisi tengah
  print('posisi pencarian: index',pos_cari,'dengan nilai',l[pos_cari])  
  if l[pos_cari] == dicari:
    ditemukan = True 
  elif l[pos_cari] > dicari:
    batas_akhir = pos_cari-1 # geser 1 titik lebih kecil dari posisi sekarang
  else:
    batas_awal = pos_cari+1 # geser 1 titik lebih besar dari posisi sekarang

if ditemukan:
  print('Nilai',dicari,'ditemukan pada indeks',pos_cari)
else:
  print('Nilai',dicari,'tidak ditemukan')
# algoritma binary search

#Hallo Ka Edwin, Adel izin buat menambahkan program OOP di sini ya 
## **Encapsulation**
class Sapi:
  def __init__(self, nama, usia, jenis_kelamin, warna, jenis):
    self.nama = nama
    self.usia = usia
    self.jenis_kelamin = jenis_kelamin
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print("Hello my name is " + self.nama)
  
  def moo(self):
    print("mhooooooo... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis kelamin: {self.jenis_kelamin}, warna: {self.warna}, jenis: {self.jenis}")


sapi1 = Sapi("abang", 1, "jantan", "coklat muda", "limosin")

sapi1.info()

## **Abstraction**
sapi1.myfunc()

## **Inheritence**
class Binatang(object):
  def __init__(self, nama, usia, jenis, mamalia):
    self.nama = nama
    self.usia = usia
    self.jenis = jenis
    self.mamalia = mamalia

  def tidur(self, durasi):
    for x in range(durasi):
      print("ddrrr... ddrrr... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis: {self.jenis}, mamalia: {self.mamalia}")


animal1 = Binatang("cemong", 1, "omnivora", True)

animal1.info()


class Sapi(Binatang):
  def __init__(self,  nama, usia, jenis_kelamin, mamalia, warna, jenis_sapi):
    super().__init__(nama, usia, jenis_kelamin, mamalia)
    self.warna = warna
    self.jenis_sapi = jenis_sapi
  
  def moo(self):
    print("mhoooooo....")

  def info_sapi(self):
    print(f"warna: {self.warna}, jenis sapi: {self.jenis_sapi}")

cow1 = Sapi("mipan", 1.5, "betina", True, "putih hitam", "perah")

cow1.info()
cow1.info_sapi()

## **Polymorphism**
class Tumbuhan(object):
  def __init__(self, nama, usia, jenis_tumbuhan):
    self.nama = nama
    self.usia = usia
    self.jenis_tumbuhan = jenis_tumbuhan

  def tidur(self, durasi):
    for x in range(durasi):
      print("bbrrrr... bbrrrr... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis: {self.jenis_tumbuhan}")


plant1 = Tumbuhan("Atang", 3.5, "Umbi-umbian")

plant1.info()

class Kentang(Tumbuhan):
  def __init__(self,  nama, usia, warna, jenis_sayuran, jenis_tumbuhan):
    super().__init__(nama, usia, jenis_tumbuhan)
    self.warna = warna
    self.jenis_sayuran = jenis_sayuran

  def tumbuh(self, durasi):
    for x in range(durasi):
      print("hallo... aku adalah kentang yang sehat... ")

  def info_kentang(self):
    print(f"warna: {self.warna}, jenis kentang: {self.jenis_sayuran}")

potato1 = Kentang("Atang", 3.5 , "cokelat muda terang", "Russet", "Umbi-umbian")

potato1.tidur(3)
print()
potato1.info()
potato1.info_kentang()
potato1.tumbuh(2)
#Sudah Ka Edwin, terima kasih banyak untuk kolaborasinya :)
